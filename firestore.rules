rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    function isSupplier(uid) {
      return request.auth.uid != null && get(/databases/$(database)/documents/users/$(uid)).data.clientStatus == false;
    }

    function isClient(uid) {
      return request.auth.uid != null && get(/databases/$(database)/documents/users/$(uid)).data.clientStatus == true;
    }

    function isProductCorrect() {
      return (request.resource.data.price is number && request.resource.data.price >= 1)
        && (request.resource.data.quantity is number && request.resource.data.quantity >= 1)
        && (request.resource.data.category != null && request.resource.data.category in ['bottled','cart','exhauster','tanker'])
        && request.resource.data.title != null
        && request.resource.data.description != null
        && request.resource.data.size() >= 6
        && exists(/databases/$(database)/documents/users/$(request.resource.data.supplier));  
    }

    function isValidReview(order) {
      return get(/databases/$(database)/documents/orders/$(order)).data.status == 'completed'
        && request.resource.data.title != null
        && request.resource.data.description != null
        && request.resource.data.client == get(/databases/$(database)/documents/orders/$(order)).data.client;
    }

    function isOwner(uid) {
      return request.auth.uid == uid;
    }

    function isAuthenticated() {
      return request.auth.uid != null;
    }

    function isAddressValid(uid) {
      return isOwner(uid) 
      && request.resource.data.region != null
      && request.resource.data.town != null
      && request.resource.data.address != null;
    }

    // BASE
    match /{document=**} {
      allow read, write: if false;
    }

    // PRODUCTS - Collection Group Scope
    match /{path=**}/products/{product} {
      // Only write a product if supplier
      allow create: if isSupplier(request.resource.data.supplier) && isProductCorrect();
      allow update: if isSupplier(resource.data.supplier);
      //Any authenticated user can view products
      allow read: if isAuthenticated();
    }

    // THIS IS THE ADMIN VAULT
    match /private/{docId} {
      // Nobody has any access
      allow read, write: if false;
    }

    // USERS
    match /users/{userId} {
      //A user can do everything apart from delete their profile
      allow get, create, update: if isOwner(userId);
      
      match /addresses/{address} {
        allow update, delete: if isOwner(userId);
        allow create: if isAddressValid(userId);
        allow read: if isOwner(userId);
      }

      match /notifications/{notification} {
        allow read, write: if isOwner(userId);
      }

      // TODO - Create a subcolletion titled public
      //        Store public info about user which can be queried by anybody but only changed by one
      //        More secure since it can be isolated and treated as a collection group query
      //        Cloud function to automatically create a public profile
      //        Required data - email,full name
      //        Optional data - ID, address
    }

    // RIDES
    match /rides/{rideId} {
      //Only a client can create
      allow create: if request.auth.uid == request.resource.data.client;
      //Riders and clients can update
      allow update: if resource.data.client == request.auth.uid 
        || resource.data.rider == request.auth.uid;
      //Only riders and clients can query
      allow read: if resource.data.client == request.auth.uid 
        || resource.data.rider == request.auth.uid;
      //Only clients can delete(cancel) a ride if the ride status is not true
      allow delete: if resource.data.client == request.auth.uid
        && resource.data.ridestatus != true;
    }

    // ORDERS
    match /orders/{order} {

      function isOrderCorrect() {
        return request.resource.data.status == false
          && request.resource.data.location != null
          && request.resource.data.size() >= 5
          && request.resource.data.products != null
          && isClient(request.resource.data.client);
      }

      function isValidOrderClient() {
        return request.auth.uid == resource.data.client;
      }

      function isValidOrderSupplier() {
        let suppliersList = resource.data.suppliers;
        return request.auth.uid in suppliersList;
      }

      allow create: if isOrderCorrect();
      allow read: if isValidOrderClient() || isValidOrderSupplier();
    }

    // REVIEWS
    match /reviews/{review} {
      allow create: if isAuthenticated() && isValidReview(request.resource.data.orderId);
      allow read: if isAuthenticated();

      // TODO - could be a collection group under orders
    }
  }
}